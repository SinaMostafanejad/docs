name: List files changed as GitHub comment

on:
  pull_request:
    branches:
      - main

jobs:
  list-files-changed:
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Format list of changed files
        id: format
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          export output=()
          export all_changed_files=()
          export added_files=()
          export modified_files=()
          export removed_files=()
          export no_preview_files=()

          export pr_num="${{ github.event.pull_request.number }}"

          # Temporarily set input field separator (IFS) to newline before filling arrays
          SAVEIFS=$IFS
          IFS=$'\n'

          export all_changed_files=("$(gh api repos/wandb/docs/pulls/${pr_num}/files -q '.[] | [.status,.filename] | @tsv' | sort)")

          for changed_file in "${all_changed_files[@]}"; do
            status="$(echo $changed_file | awk -F ' ' {'print $1'})"
            echo "Status: $status"
            
            case "$status" in
              "added")
                path="$(echo $changed_file | awk -F ' ' {'print $2'})"
                echo "Path: $path"
                added_files+=("$path")
                echo "${added_files[@]}"
                ;;
              "modified")
                path="$(echo $changed_file | awk -F ' ' {'print $2'})"
                echo "Path: $path"
                modified_files+=("$path")
                echo "${modified_files[@]}"
                ;;
              "removed")
                path="$(echo $changed_file | awk -F ' ' {'print $2'})"
                echo "Path: $path"
                removed_files+=("$path")
                echo "${removed_files[@]}"
                ;;
              *)
                echo "Unknown status $status for file $path. Giving up."
                exit -1
                ;;
            esac
          done

          echo "Added:"
          echo "${added_files[@]}"
          echo

          echo "Modified:"
          echo "${modified_files[@]}"
          echo

          echo "Removed:"
          echo "${removed_files[@]}"
          echo

          function generatePreviewURL() {
            # Preprocess input paths to output paths
            #   using # as sed separation character
            #
            #   - Remove content/
            #   - Remove _index/
            #   - Remove integration_tutorials/

            # Generate HTML preview links for added files in content/
            for file in "${added_files[@]}"; do
              if [[ "$file" =~ .*\/content\/.*\.md ]]; then
                output_path="$(echo $file | sed -E 's#content\/##g' | sed -E 's#/_index/##g' | sed -E 's#integration-tutorials\/##g')"
                preview_link="<a href=\"https://docs-$pr_num.docodile.pages.dev/$output_path\" target=\"_blank\" rel=\"noopener\">$file</a>"
                output+=("<li><b>Added</b>: $preview_link</li>")
              else
                no_preview_links+=("<b>Added, no preview</b>: $file")
              fi
            done

            # Generate HTML preview links for modified files in content/
            for file in "${modified_files[@]}"; do
              if [[ "$file" =~ .*\/content\/.*\.md ]]; then
                output_path="$(echo $file | sed -E 's#content\/##g' | sed -E 's#/_index/##g' | sed -E 's#integration-tutorials\/##g')"
                preview_link="<a href=\"https://docs-$pr_num.docodile.pages.dev/$output_path\" target=\"_blank\" rel=\"noopener\">$file</a>"
                output+=("<li><b>Modified</b>: $preview_link</li>")
              else
                no_preview_links+=("<b>Modified, no preview</b>: $file")
              fi
            done

            # Process removed files
            for file in "${removed_files[@]}"; do
              no_preview_links+=("<b>Removed, no preview</b>: $file")
            done

            # Process no preview 
            for file in "${no_preview_files[@]}"; do
              output+=("<li>$file</li>")
            done
          }

          # Reset the IFS
          IFS=$SAVEIFS 

          # Compose the body
          body="<ul>${output[@]}</ul>"
          echo "body:\n\n$body"
          echo "body=$body" >> $GITHUB_ENV

      - name: Find Comment
        uses: peter-evans/find-comment@v2.0.1
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'HTML previews:'

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2.1.0
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            <h3>HTML previews:</h3><ul>${{ env.body }}</ul><p>Preview links work <b>only</b> after the `Cloudflare Pages` build check succeeds. Links are generated only for new and modified <code>.md</code> files under <code>content/</code>.</p><p><a href="https://github.com/wandb/docs/issues/new?title=Feedback+about+HTML+preview+comments&assignees=mdlinville&body=Link+to+PR+and+describe+the+issue">Feedback about HTML previews</a>
